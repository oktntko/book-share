generator client {
  provider     = "prisma-client"
  output       = "../src/client/generated"
  moduleFormat = "esm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../src/schema/generated" // default is ./generated/zod
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true This will create an index.ts file in each sub folder that exports all the files in the folder. This option may be beneficial for typescript performance on big schemas.
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = true // default is true
  addIncludeType                   = true // default is true
  addSelectType                    = true // default is true
  validateWhereUniqueInput         = true // default is true
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "./ERD.md"
  includeRelationFromFields = true
}

////////////////////////////////
// ユーザ関連
////////////////////////////////

/// ユーザ
model User {
  user_id Int @id @default(autoincrement())

  email    String @unique @db.VarChar(255) /// @zod.string.trim().min(1).max(255).email()
  password String @db.VarChar(255) /// @zod.string.trim().min(1).max(255)
  username String @db.VarChar(100) /// @zod.string.trim().min(1).max(100)

  /// 二要素認証の有効化 `true`: 有効 / `false`: 無効
  twofa_enable Boolean @default(false)
  /// 二要素認証の秘密鍵
  twofa_secret String  @default("") @db.VarChar(255) /// @zod.string.trim().max(255)
  /// アバターイメージ
  avatar_image String  @default("") @db.Text
  /// 自己紹介
  description  String  @default("") @db.VarChar(400) /// @zod.string.trim().max(400)

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt @db.Timestamptz(3)

  session_list       Session[]
  post_list          Post[]
  heart_list         Post[]          @relation(name: "heart")
  readingrecord_list Readingrecord[]

  @@index([username], name: "index_username")
  @@map("user")
}

////////////////////////////////
// 汎用機能
////////////////////////////////

model Session {
  session_id Int @id @default(autoincrement())

  session_key    String    @unique @db.VarChar(255)
  /// express-session
  originalMaxAge Int?
  expires        DateTime? @default(now()) @db.Timestamptz(3)
  /// custom
  user_id        Int?
  data           String    @default("{}")

  user User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt @db.Timestamptz(3)

  @@map("session")
}

model File {
  file_id  String @id @default(uuid()) @db.VarChar(191) /// @zod.string.uuid()
  filename String @db.VarChar(255) /// @zod.string.trim().min(1).max(255)
  mimetype String @db.VarChar(100) /// @zod.string.trim().min(1).max(100)
  filesize Int

  created_at DateTime @default(now()) @db.Timestamptz(3)
  created_by Int
  updated_at DateTime @updatedAt @db.Timestamptz(3)
  updated_by Int

  @@map("file")
}

////////////////////////////////
// 投稿
////////////////////////////////

model Post {
  post_id Int @id @default(autoincrement())

  /// 投稿者ID
  toukousya_id Int
  /// 投稿者
  toukousya    User @relation(fields: [toukousya_id], references: [user_id], onDelete: Cascade)

  volume_id    String    @default("") @db.VarChar(255) /// @zod.string.trim().max(255)
  book_title   String    @default("") @db.VarChar(400) /// @zod.string.trim().max(400)
  post_title   String    @default("") @db.VarChar(255) /// @zod.string.trim().max(255)
  content      String    @default("") @db.Text() /// @zod.string.trim()
  published    Boolean   @default(false)
  published_at DateTime? @db.Timestamptz(3)

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt @db.Timestamptz(3)

  hearted_list User[] @relation(name: "heart")

  @@map("post")
}

/// @zod.import(["import { DateSchema } from '@book-share/lib/zod';"])
model Readingrecord {
  readingrecord_id Int @id @default(autoincrement())

  /// 本を読んだ人のユーザID
  user_id Int
  /// 本を読んだ人
  user    User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  volume_id  String @default("") @db.VarChar(255) /// @zod.string.trim().max(255)
  book_title String @default("") @db.VarChar(400) /// @zod.string.trim().max(400)
  read_date  String @default("") @db.VarChar(10) /// @zod.custom.use(DateSchema)
  star       Float  @default(0)
  hitokoto   String @default("") @db.VarChar(255) /// @zod.string.trim().max(255)

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt @db.Timestamptz(3)

  @@map("readingrecord")
}
